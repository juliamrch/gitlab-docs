###############################################
#           Docker images builds              #
###############################################

#
# Reuse some common commands
#
.docker_prepare:
  extends:
    - .retry
  image: "docker:${DOCKER_VERSION}"
  tags:
    - gitlab-org-docker
  services:
    - "docker:${DOCKER_VERSION}-dind"
  before_script:
    - docker info
    - docker context create docs-context
    - docker buildx create --use docs-context
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_VERSION: "24.0.6"

#
# Build and deploy the GitLab Docs base Docker image
#
image:gitlab-docs-base:
  extends:
    - .rules_docker_images
    - .docker_prepare
  stage: build-images
  needs: ["test:image:gitlab-docs-base"]
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/base:alpine-$ALPINE_VERSION-ruby-$RUBY_VERSION-$CI_COMMIT_SHORT_SHA
    DOCKERFILE: dockerfiles/gitlab-docs-base.Dockerfile
  script:
    - docker buildx build
             --build-arg ALPINE_VERSION=${ALPINE_VERSION}
             --build-arg RUBY_VERSION=${RUBY_VERSION}
             --tag $IMAGE_NAME
             --file $DOCKERFILE .
             --push
  environment:
    name: registry/docs-base

#
# Test the GitLab docs base Docker image if changes are made to its Dockerfile
#
test:image:gitlab-docs-base:
  extends:
    - .docker_prepare
    - .rules_docker_image_tests
  stage: test
  needs: []
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/base:alpine-$ALPINE_VERSION-ruby-$RUBY_VERSION-$CI_COMMIT_SHORT_SHA
    DOCKERFILE: dockerfiles/gitlab-docs-base.Dockerfile
  script:
    - docker buildx build
             --build-arg ALPINE_VERSION=${ALPINE_VERSION}
             --build-arg RUBY_VERSION=${RUBY_VERSION}
             --tag $IMAGE_NAME
             --file $DOCKERFILE .

#
# Build and deploy the GitLab Docs linting (Markdown) Docker image
#
image:docs-lint-markdown:
  extends:
    - .rules_docker_images
    - .docker_prepare
  stage: build-images
  needs: ["test:image:docs-lint-markdown"]
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/lint-markdown:alpine-$ALPINE_VERSION-vale-$VALE_VERSION-markdownlint2-$MARKDOWNLINT2_VERSION
    DOCKERFILE: dockerfiles/gitlab-docs-lint-markdown.Dockerfile
  script:
    - docker buildx build
             --build-arg ALPINE_VERSION=${ALPINE_VERSION}
             --build-arg VALE_VERSION=${VALE_VERSION}
             --build-arg MARKDOWNLINT2_VERSION=${MARKDOWNLINT2_VERSION}
             --tag $IMAGE_NAME
             --file $DOCKERFILE .
             --push
  environment:
    name: registry/docs-lint-markdown

#
# Test the GitLab Docs linting (Markdown) Docker image if changes are made to its Dockerfile
#
test:image:docs-lint-markdown:
  extends:
    - .docker_prepare
    - .rules_docker_image_tests
  stage: test
  needs: []
  variables:
    DOCKERFILE: dockerfiles/gitlab-docs-lint-markdown.Dockerfile
  script:
    - docker buildx build
             --build-arg ALPINE_VERSION=${ALPINE_VERSION}
             --build-arg VALE_VERSION=${VALE_VERSION}
             --build-arg MARKDOWNLINT2_VERSION=${MARKDOWNLINT2_VERSION}
             --file $DOCKERFILE .

#
# Build and deploy the GitLab Docs linting (HTML) Docker image
#
image:docs-lint-html:
  extends:
    - .rules_docker_images
    - .docker_prepare
  stage: build-images
  needs: ["test:image:docs-lint-html"]
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/lint-html:alpine-$ALPINE_VERSION-ruby-$RUBY_VERSION-$CI_COMMIT_SHORT_SHA
    DOCKERFILE: dockerfiles/gitlab-docs-lint-html.Dockerfile
  script:
    - docker buildx build
             --build-arg RUBY_VERSION=${RUBY_VERSION}
             --build-arg ALPINE_VERSION=${ALPINE_VERSION}
             --tag $IMAGE_NAME
             --file $DOCKERFILE .
             --push
  environment:
    name: registry/docs-lint-html

#
# Test the GitLab Docs linting (HTML) Docker image if changes are made to its Dockerfile
#
test:image:docs-lint-html:
  extends:
    - .docker_prepare
    - .rules_docker_image_tests
  stage: test
  needs: []
  variables:
    DOCKERFILE: dockerfiles/gitlab-docs-lint-html.Dockerfile
  script:
    - docker buildx build
             --build-arg RUBY_VERSION=${RUBY_VERSION}
             --build-arg ALPINE_VERSION=${ALPINE_VERSION}
             --file $DOCKERFILE .

#
# Final Docker image containing a single version
# It is based on single.Dockerfile for each branch
#
image:docs-single:
  tags:
    - saas-linux-medium-amd64
  extends:
    - .docker_prepare
    - .rules_docker_single_images
  stage: pre-deploy
  needs:
    - test:image:docs-single
    - compile_prod
  artifacts: {}
  cache: {}
  dependencies: []
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    DOCKERFILE: $CI_COMMIT_REF_NAME.Dockerfile
    NANOC_ENV: production
  environment:
    name: registry/$CI_COMMIT_REF_SLUG
  script:
    - docker buildx build
             --build-arg NANOC_ENV=${NANOC_ENV}
             --build-arg VER=${CI_COMMIT_REF_NAME}
             --build-arg SEARCH_BACKEND="google"
             --build-arg GOOGLE_SEARCH_KEY=${GOOGLE_SEARCH_KEY}
             --tag $IMAGE_NAME
             --file $DOCKERFILE .
             --push

#
# Test the GitLab docs single version Docker image if changes made to its Dockerfile
# We need to specify an output (similar to --push), otherwise the build result
# will only remain in the build cache. We use --load to load the image into
# Docker.
#
test:image:docs-single:
  tags:
    - saas-linux-medium-amd64
  extends:
    - .docker_prepare
    - .rules_docker_single_images_tests
  stage: test
  variables:
    GITLAB_VERSION: '16.10'
    DOCKERFILE: dockerfiles/single.Dockerfile
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$GITLAB_VERSION
    NANOC_ENV: test
  needs: []
  script:
    - docker buildx build
             --build-arg NANOC_ENV=${NANOC_ENV}
             --build-arg VER=${GITLAB_VERSION}
             --build-arg SEARCH_BACKEND="google"
             --tag $IMAGE_NAME
             --file $DOCKERFILE .
             --load
    - version=$(docker run --rm $IMAGE_NAME ls -1 /usr/share/nginx/html/ | grep -v html)
    - echo $version
    - if [ "$version" = "$GITLAB_VERSION" ]; then echo "OK"; else exit 1 ; fi

#
# Final Docker image containing a single version with lunr.js enabled
# It is based on single.Dockerfile for each branch
#
image:docs-single-lunrjs:
  tags:
    - saas-linux-medium-amd64
  extends:
    - .docker_prepare
    - .rules_docker_single_images
  stage: pre-deploy
  needs:
    - test:image:docs-single-lunrjs
    - compile_prod
  artifacts: {}
  cache: {}
  dependencies: []
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/archives:$CI_COMMIT_REF_NAME
    DOCKERFILE: $CI_COMMIT_REF_NAME.Dockerfile
    NANOC_ENV: production
  environment:
    name: registry-archives/$CI_COMMIT_REF_SLUG
  script:
    - docker buildx build
             --build-arg NANOC_ENV=${NANOC_ENV}
             --build-arg VER=${CI_COMMIT_REF_NAME}
             --build-arg SEARCH_BACKEND="lunr"
             --tag $IMAGE_NAME
             --file $DOCKERFILE .
             --push

#
# Test the GitLab docs single version Docker image with lunr.js enabled
# if changes made to its Dockerfile
#
test:image:docs-single-lunrjs:
  tags:
    - saas-linux-medium-amd64
  extends:
    - .docker_prepare
    - .rules_docker_single_images_tests
  stage: test
  variables:
    GITLAB_VERSION: '16.10'
    IMAGE_NAME: $CI_REGISTRY_IMAGE/archives:$GITLAB_VERSION
    DOCKERFILE: dockerfiles/single.Dockerfile
    NANOC_ENV: test
  needs: []
  script:
    - apk add make bash
    - docker buildx build
             --build-arg NANOC_ENV=${NANOC_ENV}
             --build-arg VER=${GITLAB_VERSION}
             --build-arg SEARCH_BACKEND="lunr"
             --tag $IMAGE_NAME
             --file $DOCKERFILE .
             --load
    - make check-lunr-index

#
# Build master containing the online archives and latest docs (on schedules)
#
image:docs-latest:
  extends:
    - .rules_docker_images
    - .docker_prepare
  stage: build-images
  needs: ["test:image:docs-latest"]
  artifacts: {}
  cache: {}
  dependencies: []
  variables:
    NANOC_ENV: 'production'
    IMAGE_NAME: $CI_REGISTRY_IMAGE:latest
    DOCKERFILE: latest.Dockerfile
  environment:
    name: registry/latest
  script:
    - docker buildx build
             --build-arg NANOC_ENV=${NANOC_ENV}
             --tag $IMAGE_NAME
             --file $DOCKERFILE .
             --push

#
# Test the GitLab docs latest Docker image if changes made to its Dockerfile
# We need to specify an output (similar to --push), otherwise the build result
# will only remain in the build cache. We use --load to load the image into
# Docker.
#
test:image:docs-latest:
  extends:
    - .docker_prepare
    - .rules_docker_image_tests
  stage: test
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:latest
    DOCKERFILE: latest.Dockerfile
  needs: []
  script:
    - docker buildx build
             --build-arg NANOC_ENV=${NANOC_ENV}
             --tag $IMAGE_NAME
             --file $DOCKERFILE .
             --load
    - docker run --rm $IMAGE_NAME ls -l /usr/share/nginx/html
    - versions_image=$(docker run --rm $IMAGE_NAME ls -1 /usr/share/nginx/html | head -n 3)
    - versions_dockerfile=$(grep COPY latest.Dockerfile | cut -d ' ' -f2 | cut  -d ':' -f2 | sort -u)
    - echo $versions_image
    - echo $versions_dockerfile
    - if [ "$versions_image" = "$versions_dockerfile" ]; then echo "OK"; else echo "Versions mismatch" && exit 1 ; fi

#
# Build the archives image that is deployed at https://archives.docs.gitlab.com
#
image:docs-archives:
  extends:
    - .docker_prepare
    - .rules_docker_images
  needs: ["test:image:docs-archives"]
  stage: build-images
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/archives:all
    DOCKERFILE: dockerfiles/archives.Dockerfile
  script:
    - docker buildx build -t $IMAGE_NAME -f $DOCKERFILE . --push

#
# Test the GitLab docs archives Docker image if changes made to its Dockerfile
#
test:image:docs-archives:
  extends:
    - .docker_prepare
    - .rules_docker_image_tests
  stage: test
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/archives:all
    DOCKERFILE: dockerfiles/archives.Dockerfile
  needs: []
  script:
    - docker buildx build -t $IMAGE_NAME -f $DOCKERFILE .

#
# Build the image that is used for the gitlab-docs Workspace
#
image:docs-workspace:
  extends:
    - .docker_prepare
    - .rules_docker_images
  needs: ["test:image:docs-workspace"]
  stage: build-images
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/workspace
    DOCKERFILE: dockerfiles/gitlab-docs-workspace.Dockerfile
  script:
    - docker buildx build --build-arg ASDF_VERSION=${ASDF_VERSION} -t $IMAGE_NAME -f $DOCKERFILE . --push

#
# Test the GitLab docs workspace Docker image if changes made to its Dockerfile
#
test:image:docs-workspace:
  extends:
    - .docker_prepare
  stage: test
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/workspace
    DOCKERFILE: dockerfiles/gitlab-docs-workspace.Dockerfile
  needs: []
  script:
    - docker buildx build --build-arg ASDF_VERSION=${ASDF_VERSION} -t $IMAGE_NAME -f $DOCKERFILE .
  rules:
    - if: '$DOCS_PROJECT_PIPELINE_TYPE == "Build docker images pipeline"'
    - if: '$DOCS_PROJECT_PIPELINE_TYPE =~ /^MR pipeline.*/'
      # This image uses asdf to manage dependencies, so run this test if tool versions change.
      changes:
        - .tool-versions
        - $DOCKERFILE
